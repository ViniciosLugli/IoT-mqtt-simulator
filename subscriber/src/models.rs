// Code generated by Prisma Client Rust. DO NOT EDIT

pub static DATAMODEL_STR: &'static str =
	include_str!("/home/vinicioslugli/Documentos/scripts/rust/IoT-mqtt-simulator/subscriber/prisma/schema.prisma");
static DATABASE_STR: &'static str = "postgresql";
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
	PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(url: &str) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
	PrismaClient::_builder().with_url(url.to_string()).build().await
}
pub mod sensor_reading {
	use super::_prisma::*;
	use super::*;
	pub const NAME: &str = "SensorReading";
	pub mod id {
		use super::super::*;
		use super::_prisma::*;
		use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
		pub const NAME: &str = "id";
		pub struct Set(pub i32);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetId(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Id(v)
			}
		}
		pub fn set<T: From<Set>>(value: i32) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Id(direction)
		}
		pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
			UniqueWhereParam::IdEquals(value).into()
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Id, {
			fn in_vec(_: Vec<i32>) -> InVec;
			fn not_in_vec(_: Vec<i32>) -> NotInVec;
			fn lt(_: i32) -> Lt;
			fn lte(_: i32) -> Lte;
			fn gt(_: i32) -> Gt;
			fn gte(_: i32) -> Gte;
			fn not(_: i32) -> Not;
		});
		pub fn increment(value: i32) -> SetParam {
			SetParam::IncrementId(value)
		}
		pub fn decrement(value: i32) -> SetParam {
			SetParam::DecrementId(value)
		}
		pub fn multiply(value: i32) -> SetParam {
			SetParam::MultiplyId(value)
		}
		pub fn divide(value: i32) -> SetParam {
			SetParam::DivideId(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Id(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Id(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod name {
		use super::super::*;
		use super::_prisma::*;
		use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
		pub const NAME: &str = "name";
		pub struct Set(pub String);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetName(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Name(v)
			}
		}
		pub fn set<T: From<Set>>(value: String) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Name(direction)
		}
		pub fn equals(value: String) -> WhereParam {
			WhereParam::Name(_prisma::read_filters::StringFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Name, {
			fn in_vec(_: Vec<String>) -> InVec;
			fn not_in_vec(_: Vec<String>) -> NotInVec;
			fn lt(_: String) -> Lt;
			fn lte(_: String) -> Lte;
			fn gt(_: String) -> Gt;
			fn gte(_: String) -> Gte;
			fn contains(_: String) -> Contains;
			fn starts_with(_: String) -> StartsWith;
			fn ends_with(_: String) -> EndsWith;
			fn mode(_: super::super::QueryMode) -> Mode;
			fn not(_: String) -> Not;
		});
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Name(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Name(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod value {
		use super::super::*;
		use super::_prisma::*;
		use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
		pub const NAME: &str = "value";
		pub struct Set(pub f64);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetValue(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Value(v)
			}
		}
		pub fn set<T: From<Set>>(value: f64) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Value(direction)
		}
		pub fn equals(value: f64) -> WhereParam {
			WhereParam::Value(_prisma::read_filters::FloatFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::FloatFilter, Value, {
			fn in_vec(_: Vec<f64>) -> InVec;
			fn not_in_vec(_: Vec<f64>) -> NotInVec;
			fn lt(_: f64) -> Lt;
			fn lte(_: f64) -> Lte;
			fn gt(_: f64) -> Gt;
			fn gte(_: f64) -> Gte;
			fn not(_: f64) -> Not;
		});
		pub fn increment(value: f64) -> SetParam {
			SetParam::IncrementValue(value)
		}
		pub fn decrement(value: f64) -> SetParam {
			SetParam::DecrementValue(value)
		}
		pub fn multiply(value: f64) -> SetParam {
			SetParam::MultiplyValue(value)
		}
		pub fn divide(value: f64) -> SetParam {
			SetParam::DivideValue(value)
		}
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Value(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Value(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod unit {
		use super::super::*;
		use super::_prisma::*;
		use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
		pub const NAME: &str = "unit";
		pub struct Set(pub String);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetUnit(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::Unit(v)
			}
		}
		pub fn set<T: From<Set>>(value: String) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::Unit(direction)
		}
		pub fn equals(value: String) -> WhereParam {
			WhereParam::Unit(_prisma::read_filters::StringFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Unit, {
			fn in_vec(_: Vec<String>) -> InVec;
			fn not_in_vec(_: Vec<String>) -> NotInVec;
			fn lt(_: String) -> Lt;
			fn lte(_: String) -> Lte;
			fn gt(_: String) -> Gt;
			fn gte(_: String) -> Gte;
			fn contains(_: String) -> Contains;
			fn starts_with(_: String) -> StartsWith;
			fn ends_with(_: String) -> EndsWith;
			fn mode(_: super::super::QueryMode) -> Mode;
			fn not(_: String) -> Not;
		});
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::Unit(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::Unit(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub mod created_at {
		use super::super::*;
		use super::_prisma::*;
		use super::{OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam};
		pub const NAME: &str = "createdAt";
		pub struct Set(pub ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>);
		impl From<Set> for SetParam {
			fn from(Set(v): Set) -> Self {
				Self::SetCreatedAt(v)
			}
		}
		impl From<Set> for UncheckedSetParam {
			fn from(Set(v): Set) -> Self {
				Self::CreatedAt(v)
			}
		}
		pub fn set<T: From<Set>>(value: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> T {
			Set(value).into()
		}
		pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
			OrderByParam::CreatedAt(direction)
		}
		pub fn equals(value: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> WhereParam {
			WhereParam::CreatedAt(_prisma::read_filters::DateTimeFilter::Equals(value))
		}
		::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::DateTimeFilter, CreatedAt, {
			fn in_vec(_: Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>) -> InVec;
			fn not_in_vec(_: Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>) -> NotInVec;
			fn lt(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Lt;
			fn lte(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Lte;
			fn gt(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Gt;
			fn gte(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Gte;
			fn not(_: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>) -> Not;
		});
		pub struct Include;
		impl Into<super::IncludeParam> for Include {
			fn into(self) -> super::IncludeParam {
				super::IncludeParam::CreatedAt(self)
			}
		}
		impl Include {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
		pub struct Select;
		impl Into<super::SelectParam> for Select {
			fn into(self) -> super::SelectParam {
				super::SelectParam::CreatedAt(self)
			}
		}
		impl Select {
			pub fn to_selection(self) -> ::prisma_client_rust::Selection {
				::prisma_client_rust::sel(NAME)
			}
		}
	}
	pub fn create(name: String, value: f64, unit: String, _params: Vec<SetParam>) -> (String, f64, String, Vec<SetParam>) {
		(name, value, unit, _params)
	}
	pub fn create_unchecked(
		name: String,
		value: f64,
		unit: String,
		_params: Vec<SetParam>,
	) -> (String, f64, String, Vec<SetParam>) {
		(name, value, unit, _params)
	}
	#[macro_export]
	macro_rules ! _select_sensor_reading { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: sensor_reading :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: sensor_reading :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: sensor_reading :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: sensor_reading :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: sensor_reading :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: sensor_reading :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , name , value , unit , created_at } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: sensor_reading :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: sensor_reading :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: sensor_reading :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: sensor_reading :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: sensor_reading :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: sensor_reading :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "name" , "value" , "unit" , "createdAt"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: sensor_reading :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { i32 } ; (@ field_type ; name) => { String } ; (@ field_type ; value) => { f64 } ; (@ field_type ; unit) => { String } ; (@ field_type ; created_at) => { :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "SensorReading" , available relations are "id, name, value, unit, created_at")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: sensor_reading :: SelectParam > :: into (crate :: prisma :: sensor_reading :: id :: Select) } ; (@ selection_field_to_selection_param ; name) => { Into :: < crate :: prisma :: sensor_reading :: SelectParam > :: into (crate :: prisma :: sensor_reading :: name :: Select) } ; (@ selection_field_to_selection_param ; value) => { Into :: < crate :: prisma :: sensor_reading :: SelectParam > :: into (crate :: prisma :: sensor_reading :: value :: Select) } ; (@ selection_field_to_selection_param ; unit) => { Into :: < crate :: prisma :: sensor_reading :: SelectParam > :: into (crate :: prisma :: sensor_reading :: unit :: Select) } ; (@ selection_field_to_selection_param ; created_at) => { Into :: < crate :: prisma :: sensor_reading :: SelectParam > :: into (crate :: prisma :: sensor_reading :: created_at :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: sensor_reading :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; value) => { "value" } ; (@ field_serde_name ; unit) => { "unit" } ; (@ field_serde_name ; created_at) => { "createdAt" } ; }
	pub use _select_sensor_reading as select;
	pub enum SelectParam {
		Id(id::Select),
		Name(name::Select),
		Value(value::Select),
		Unit(unit::Select),
		CreatedAt(created_at::Select),
	}
	impl SelectParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Name(data) => data.to_selection(),
				Self::Value(data) => data.to_selection(),
				Self::Unit(data) => data.to_selection(),
				Self::CreatedAt(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _include_sensor_reading { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: sensor_reading :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: sensor_reading :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: sensor_reading :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: sensor_reading :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: sensor_reading :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: sensor_reading :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: sensor_reading :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: sensor_reading :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : i32 , pub name : String , pub value : f64 , pub unit : String , pub created_at : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > , $ (pub $ field : crate :: prisma :: sensor_reading :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (name) , stringify ! (value) , stringify ! (unit) , stringify ! (created_at)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: sensor_reading :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: sensor_reading :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: sensor_reading :: name :: NAME , & self . name) ? ; state . serialize_field (crate :: prisma :: sensor_reading :: value :: NAME , & self . value) ? ; state . serialize_field (crate :: prisma :: sensor_reading :: unit :: NAME , & self . unit) ? ; state . serialize_field (crate :: prisma :: sensor_reading :: created_at :: NAME , & self . created_at) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , name , value , unit , created_at } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: sensor_reading :: $ field :: NAME) , + , crate :: prisma :: sensor_reading :: id :: NAME , crate :: prisma :: sensor_reading :: name :: NAME , crate :: prisma :: sensor_reading :: value :: NAME , crate :: prisma :: sensor_reading :: unit :: NAME , crate :: prisma :: sensor_reading :: created_at :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: sensor_reading :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: sensor_reading :: id :: NAME => Ok (Field :: id) , crate :: prisma :: sensor_reading :: name :: NAME => Ok (Field :: name) , crate :: prisma :: sensor_reading :: value :: NAME => Ok (Field :: value) , crate :: prisma :: sensor_reading :: unit :: NAME => Ok (Field :: unit) , crate :: prisma :: sensor_reading :: created_at :: NAME => Ok (Field :: created_at) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut name = None ; let mut value = None ; let mut unit = None ; let mut created_at = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: sensor_reading :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: name => { if name . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: sensor_reading :: name :: NAME)) ; } name = Some (map . next_value () ?) ; } Field :: value => { if value . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: sensor_reading :: value :: NAME)) ; } value = Some (map . next_value () ?) ; } Field :: unit => { if unit . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: sensor_reading :: unit :: NAME)) ; } unit = Some (map . next_value () ?) ; } Field :: created_at => { if created_at . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: sensor_reading :: created_at :: NAME)) ; } created_at = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: sensor_reading :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: sensor_reading :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: sensor_reading :: id :: NAME)) ? ; let name = name . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: sensor_reading :: name :: NAME)) ? ; let value = value . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: sensor_reading :: value :: NAME)) ? ; let unit = unit . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: sensor_reading :: unit :: NAME)) ? ; let created_at = created_at . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: sensor_reading :: created_at :: NAME)) ? ; Ok (Data { id , name , value , unit , created_at , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "name" , "value" , "unit" , "createdAt"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: sensor_reading :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "SensorReading" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: sensor_reading :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; name) => { "name" } ; (@ field_serde_name ; value) => { "value" } ; (@ field_serde_name ; unit) => { "unit" } ; (@ field_serde_name ; created_at) => { "createdAt" } ; }
	pub use _include_sensor_reading as include;
	pub enum IncludeParam {
		Id(id::Include),
		Name(name::Include),
		Value(value::Include),
		Unit(unit::Include),
		CreatedAt(created_at::Include),
	}
	impl IncludeParam {
		pub fn to_selection(self) -> ::prisma_client_rust::Selection {
			match self {
				Self::Id(data) => data.to_selection(),
				Self::Name(data) => data.to_selection(),
				Self::Value(data) => data.to_selection(),
				Self::Unit(data) => data.to_selection(),
				Self::CreatedAt(data) => data.to_selection(),
			}
		}
	}
	#[macro_export]
	macro_rules ! _partial_unchecked_sensor_reading { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: sensor_reading struct $ struct_name { # [serde (rename = "id")] pub id : i32 , # [serde (rename = "name")] pub name : String , # [serde (rename = "value")] pub value : f64 , # [serde (rename = "unit")] pub unit : String , # [serde (rename = "createdAt")] pub created_at : :: prisma_client_rust :: chrono :: DateTime < :: prisma_client_rust :: chrono :: FixedOffset , > } [$ ($ scalar_field) , +] } } ; }
	pub use _partial_unchecked_sensor_reading as partial_unchecked;
	#[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
	pub struct Data {
		#[serde(rename = "id")]
		pub id: i32,
		#[serde(rename = "name")]
		pub name: String,
		#[serde(rename = "value")]
		pub value: f64,
		#[serde(rename = "unit")]
		pub unit: String,
		#[serde(rename = "createdAt")]
		pub created_at: ::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>,
	}
	impl Data {}
	#[derive(Clone)]
	pub enum WithParam {}
	impl Into<::prisma_client_rust::Selection> for WithParam {
		fn into(self) -> ::prisma_client_rust::Selection {
			match self {}
		}
	}
	#[derive(Clone)]
	pub enum SetParam {
		SetId(i32),
		IncrementId(i32),
		DecrementId(i32),
		MultiplyId(i32),
		DivideId(i32),
		SetName(String),
		SetValue(f64),
		IncrementValue(f64),
		DecrementValue(f64),
		MultiplyValue(f64),
		DivideValue(f64),
		SetUnit(String),
		SetCreatedAt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
	}
	impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
		fn from(param: SetParam) -> Self {
			match param { SetParam :: SetId (value) => (id :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Int (value as i64)) , SetParam :: IncrementId (value) => (id :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("increment" . to_string () , :: prisma_client_rust :: PrismaValue :: Int (value as i64))])) , SetParam :: DecrementId (value) => (id :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("decrement" . to_string () , :: prisma_client_rust :: PrismaValue :: Int (value as i64))])) , SetParam :: MultiplyId (value) => (id :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("multiply" . to_string () , :: prisma_client_rust :: PrismaValue :: Int (value as i64))])) , SetParam :: DivideId (value) => (id :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("divide" . to_string () , :: prisma_client_rust :: PrismaValue :: Int (value as i64))])) , SetParam :: SetName (value) => (name :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: String (value)) , SetParam :: SetValue (value) => (value :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ())) , SetParam :: IncrementValue (value) => (value :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("increment" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))])) , SetParam :: DecrementValue (value) => (value :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("decrement" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))])) , SetParam :: MultiplyValue (value) => (value :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("multiply" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))])) , SetParam :: DivideValue (value) => (value :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: Object (vec ! [("divide" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))])) , SetParam :: SetUnit (value) => (unit :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: String (value)) , SetParam :: SetCreatedAt (value) => (created_at :: NAME . to_string () , :: prisma_client_rust :: PrismaValue :: DateTime (value)) }
		}
	}
	#[derive(Clone)]
	pub enum UncheckedSetParam {
		Id(i32),
		Name(String),
		Value(f64),
		Unit(String),
		CreatedAt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
	}
	impl From<UncheckedSetParam> for SetParam {
		fn from(param: UncheckedSetParam) -> Self {
			match param {
				UncheckedSetParam::Id(value) => Self::SetId(value),
				UncheckedSetParam::Name(value) => Self::SetName(value),
				UncheckedSetParam::Value(value) => Self::SetValue(value),
				UncheckedSetParam::Unit(value) => Self::SetUnit(value),
				UncheckedSetParam::CreatedAt(value) => Self::SetCreatedAt(value),
			}
		}
	}
	#[derive(Clone)]
	pub enum OrderByParam {
		Id(::prisma_client_rust::Direction),
		Name(::prisma_client_rust::Direction),
		Value(::prisma_client_rust::Direction),
		Unit(::prisma_client_rust::Direction),
		CreatedAt(::prisma_client_rust::Direction),
	}
	impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
		fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
			match self {
				Self::Id(direction) => (id::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string())),
				Self::Name(direction) => {
					(name::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string()))
				}
				Self::Value(direction) => {
					(value::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string()))
				}
				Self::Unit(direction) => {
					(unit::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string()))
				}
				Self::CreatedAt(direction) => {
					(created_at::NAME.to_string(), ::prisma_client_rust::PrismaValue::String(direction.to_string()))
				}
			}
		}
	}
	#[derive(Clone)]
	pub enum WhereParam {
		Not(Vec<WhereParam>),
		Or(Vec<WhereParam>),
		And(Vec<WhereParam>),
		Id(_prisma::read_filters::IntFilter),
		Name(_prisma::read_filters::StringFilter),
		Value(_prisma::read_filters::FloatFilter),
		Unit(_prisma::read_filters::StringFilter),
		CreatedAt(_prisma::read_filters::DateTimeFilter),
	}
	impl ::prisma_client_rust::WhereInput for WhereParam {
		fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
			let (name, value) = match self {
				Self::Not(value) => (
					"NOT",
					::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
						value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
					)),
				),
				Self::Or(value) => (
					"OR",
					::prisma_client_rust::SerializedWhereValue::List(
						value
							.into_iter()
							.map(::prisma_client_rust::WhereInput::serialize)
							.map(Into::into)
							.map(|v| vec![v])
							.map(::prisma_client_rust::PrismaValue::Object)
							.collect(),
					),
				),
				Self::And(value) => (
					"AND",
					::prisma_client_rust::SerializedWhereValue::Object(::prisma_client_rust::merge_fields(
						value.into_iter().map(::prisma_client_rust::WhereInput::serialize).map(Into::into).collect(),
					)),
				),
				Self::Id(value) => (id::NAME, value.into()),
				Self::Name(value) => (name::NAME, value.into()),
				Self::Value(value) => (value::NAME, value.into()),
				Self::Unit(value) => (unit::NAME, value.into()),
				Self::CreatedAt(value) => (created_at::NAME, value.into()),
			};
			::prisma_client_rust::SerializedWhereInput::new(name, value.into())
		}
	}
	#[derive(Clone)]
	pub enum UniqueWhereParam {
		IdEquals(i32),
	}
	impl From<UniqueWhereParam> for WhereParam {
		fn from(value: UniqueWhereParam) -> Self {
			match value {
				UniqueWhereParam::IdEquals(value) => Self::Id(_prisma::read_filters::IntFilter::Equals(value)),
			}
		}
	}
	impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
		fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
			match op {
				::prisma_client_rust::Operator::Not(value) => Self::Not(value),
				::prisma_client_rust::Operator::And(value) => Self::And(value),
				::prisma_client_rust::Operator::Or(value) => Self::Or(value),
			}
		}
	}
	#[derive(Clone)]
	pub struct Types;
	impl ::prisma_client_rust::ModelTypes for Types {
		type Data = Data;
		type Where = WhereParam;
		type UncheckedSet = UncheckedSetParam;
		type Set = SetParam;
		type With = WithParam;
		type OrderBy = OrderByParam;
		type Cursor = UniqueWhereParam;
		const MODEL: &'static str = NAME;
		fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
			vec![
				::prisma_client_rust::sel(id::NAME),
				::prisma_client_rust::sel(name::NAME),
				::prisma_client_rust::sel(value::NAME),
				::prisma_client_rust::sel(unit::NAME),
				::prisma_client_rust::sel(created_at::NAME),
			]
		}
	}
	pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
	pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
	pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
	pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
	pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
	pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
	pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
	pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
	pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
	pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
	pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
	pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
	pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
	#[derive(Clone)]
	pub struct Actions<'a> {
		pub client: &'a ::prisma_client_rust::PrismaClientInternals,
	}
	impl<'a> Actions<'a> {
		pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
			FindUnique::new(self.client, _where.into())
		}
		pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
			FindFirst::new(self.client, _where)
		}
		pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
			FindMany::new(self.client, _where)
		}
		pub fn create(self, name: String, value: f64, unit: String, mut _params: Vec<SetParam>) -> Create<'a> {
			_params.extend([name::set(name), value::set(value), unit::set(unit)]);
			Create::new(self.client, _params)
		}
		pub fn create_unchecked(self, name: String, value: f64, unit: String, mut _params: Vec<UncheckedSetParam>) -> Create<'a> {
			_params.extend([name::set(name), value::set(value), unit::set(unit)]);
			Create::new(self.client, _params.into_iter().map(Into::into).collect())
		}
		pub fn create_many(self, data: Vec<(String, f64, String, Vec<SetParam>)>) -> CreateMany<'a> {
			let data = data
				.into_iter()
				.map(|(name, value, unit, mut _params)| {
					_params.extend([name::set(name), value::set(value), unit::set(unit)]);
					_params
				})
				.collect();
			CreateMany::new(self.client, data)
		}
		pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
			Update::new(self.client, _where.into(), _params, vec![])
		}
		pub fn update_unchecked(self, _where: UniqueWhereParam, _params: Vec<UncheckedSetParam>) -> Update<'a> {
			Update::new(self.client, _where.into(), _params.into_iter().map(Into::into).collect(), vec![])
		}
		pub fn update_many(self, _where: Vec<WhereParam>, _params: Vec<SetParam>) -> UpdateMany<'a> {
			UpdateMany::new(self.client, _where, _params)
		}
		pub fn upsert(
			self,
			_where: UniqueWhereParam,
			(name, value, unit, mut _params): (String, f64, String, Vec<SetParam>),
			_update: Vec<SetParam>,
		) -> Upsert<'a> {
			_params.extend([name::set(name), value::set(value), unit::set(unit)]);
			Upsert::new(self.client, _where.into(), _params, _update)
		}
		pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
			Delete::new(self.client, _where.into(), vec![])
		}
		pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
			DeleteMany::new(self.client, _where)
		}
		pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
			Count::new(self.client, _where)
		}
		pub fn find_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
			::prisma_client_rust::FindRaw::new(self.client)
		}
		pub fn aggregate_raw<T: ::prisma_client_rust::Data>(self) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
			::prisma_client_rust::AggregateRaw::new(self.client)
		}
	}
}
pub mod _prisma {
	pub struct PrismaClientBuilder {
		url: Option<String>,
		action_notifier: ::prisma_client_rust::ActionNotifier,
	}
	impl PrismaClientBuilder {
		fn new() -> Self {
			Self { url: None, action_notifier: ::prisma_client_rust::ActionNotifier::new() }
		}
		pub fn with_url(mut self, url: String) -> Self {
			self.url = Some(url);
			self
		}
		pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
			let internals =
				::prisma_client_rust::PrismaClientInternals::new(self.url, self.action_notifier, super::DATAMODEL_STR).await?;
			Ok(PrismaClient(internals))
		}
	}
	pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
	impl ::std::fmt::Debug for PrismaClient {
		fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
			f.debug_struct("PrismaClient").finish()
		}
	}
	impl PrismaClient {
		pub fn _builder() -> PrismaClientBuilder {
			PrismaClientBuilder::new()
		}
		pub fn _query_raw<T: ::prisma_client_rust::Data>(
			&self,
			query: ::prisma_client_rust::Raw,
		) -> ::prisma_client_rust::QueryRaw<T> {
			::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
		}
		pub fn _execute_raw(&self, query: ::prisma_client_rust::Raw) -> ::prisma_client_rust::ExecuteRaw {
			::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
		}
		pub async fn _batch<'batch, T: ::prisma_client_rust::BatchContainer<'batch, Marker>, Marker>(
			&self,
			queries: T,
		) -> ::prisma_client_rust::Result<<T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType> {
			::prisma_client_rust::batch(queries, &self.0).await
		}
		pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
			::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
		}
		pub fn sensor_reading(&self) -> super::sensor_reading::Actions {
			super::sensor_reading::Actions { client: &self.0 }
		}
	}
	impl ::prisma_client_rust::PrismaClient for PrismaClient {
		fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
			&self.0
		}
		fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
			&mut self.0
		}
		fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
			Self(self.0.with_tx_id(tx_id))
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum QueryMode {
		#[serde(rename = "default")]
		Default,
		#[serde(rename = "insensitive")]
		Insensitive,
	}
	impl ToString for QueryMode {
		fn to_string(&self) -> String {
			match self {
				Self::Default => "default".to_string(),
				Self::Insensitive => "insensitive".to_string(),
			}
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum SensorReadingScalarFieldEnum {
		#[serde(rename = "id")]
		Id,
		#[serde(rename = "name")]
		Name,
		#[serde(rename = "value")]
		Value,
		#[serde(rename = "unit")]
		Unit,
		#[serde(rename = "createdAt")]
		CreatedAt,
	}
	impl ToString for SensorReadingScalarFieldEnum {
		fn to_string(&self) -> String {
			match self {
				Self::Id => "id".to_string(),
				Self::Name => "name".to_string(),
				Self::Value => "value".to_string(),
				Self::Unit => "unit".to_string(),
				Self::CreatedAt => "createdAt".to_string(),
			}
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum SortOrder {
		#[serde(rename = "asc")]
		Asc,
		#[serde(rename = "desc")]
		Desc,
	}
	impl ToString for SortOrder {
		fn to_string(&self) -> String {
			match self {
				Self::Asc => "asc".to_string(),
				Self::Desc => "desc".to_string(),
			}
		}
	}
	#[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
	pub enum TransactionIsolationLevel {
		#[serde(rename = "ReadUncommitted")]
		ReadUncommitted,
		#[serde(rename = "ReadCommitted")]
		ReadCommitted,
		#[serde(rename = "RepeatableRead")]
		RepeatableRead,
		#[serde(rename = "Serializable")]
		Serializable,
	}
	impl ToString for TransactionIsolationLevel {
		fn to_string(&self) -> String {
			match self {
				Self::ReadUncommitted => "ReadUncommitted".to_string(),
				Self::ReadCommitted => "ReadCommitted".to_string(),
				Self::RepeatableRead => "RepeatableRead".to_string(),
				Self::Serializable => "Serializable".to_string(),
			}
		}
	}
	impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
	pub mod read_filters {
		#[derive(Clone)]
		pub enum IntFilter {
			Equals(i32),
			InVec(Vec<i32>),
			NotInVec(Vec<i32>),
			Lt(i32),
			Lte(i32),
			Gt(i32),
			Gte(i32),
			Not(i32),
		}
		impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
			fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
				match self {
					Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"equals".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"in".to_string(),
						::prisma_client_rust::PrismaValue::List(
							value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64)).collect(),
						),
					)]),
					Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"notIn".to_string(),
						::prisma_client_rust::PrismaValue::List(
							value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64)).collect(),
						),
					)]),
					Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lt".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lte".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gt".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gte".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
					Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"not".to_string(),
						::prisma_client_rust::PrismaValue::Int(value as i64),
					)]),
				}
			}
		}
		#[derive(Clone)]
		pub enum StringFilter {
			Equals(String),
			InVec(Vec<String>),
			NotInVec(Vec<String>),
			Lt(String),
			Lte(String),
			Gt(String),
			Gte(String),
			Contains(String),
			StartsWith(String),
			EndsWith(String),
			Mode(super::super::QueryMode),
			Not(String),
		}
		impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
			fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
				match self {
					Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"equals".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"in".to_string(),
						::prisma_client_rust::PrismaValue::List(
							value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::String(value)).collect(),
						),
					)]),
					Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"notIn".to_string(),
						::prisma_client_rust::PrismaValue::List(
							value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::String(value)).collect(),
						),
					)]),
					Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lt".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lte".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gt".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gte".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Contains(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"contains".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::StartsWith(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"startsWith".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::EndsWith(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"endsWith".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
					Self::Mode(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"mode".to_string(),
						::prisma_client_rust::PrismaValue::Enum(value.to_string()),
					)]),
					Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"not".to_string(),
						::prisma_client_rust::PrismaValue::String(value),
					)]),
				}
			}
		}
		#[derive(Clone)]
		pub enum FloatFilter {
			Equals(f64),
			InVec(Vec<f64>),
			NotInVec(Vec<f64>),
			Lt(f64),
			Lte(f64),
			Gt(f64),
			Gte(f64),
			Not(f64),
		}
		impl Into<::prisma_client_rust::SerializedWhereValue> for FloatFilter {
			fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
				match self { Self :: Equals (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("equals" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))]) , Self :: InVec (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("in" . to_string () , :: prisma_client_rust :: PrismaValue :: List (value . into_iter () . map (| value | :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ())) . collect ()))]) , Self :: NotInVec (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("notIn" . to_string () , :: prisma_client_rust :: PrismaValue :: List (value . into_iter () . map (| value | :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ())) . collect ()))]) , Self :: Lt (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("lt" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))]) , Self :: Lte (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("lte" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))]) , Self :: Gt (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("gt" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))]) , Self :: Gte (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("gte" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))]) , Self :: Not (value) => :: prisma_client_rust :: SerializedWhereValue :: Object (vec ! [("not" . to_string () , :: prisma_client_rust :: PrismaValue :: Float (< :: prisma_client_rust :: bigdecimal :: BigDecimal as :: prisma_client_rust :: bigdecimal :: FromPrimitive > :: from_f64 (value) . unwrap () . normalized ()))]) }
			}
		}
		#[derive(Clone)]
		pub enum DateTimeFilter {
			Equals(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
			InVec(Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>),
			NotInVec(Vec<::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>>),
			Lt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
			Lte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
			Gt(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
			Gte(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
			Not(::prisma_client_rust::chrono::DateTime<::prisma_client_rust::chrono::FixedOffset>),
		}
		impl Into<::prisma_client_rust::SerializedWhereValue> for DateTimeFilter {
			fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
				match self {
					Self::Equals(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"equals".to_string(),
						::prisma_client_rust::PrismaValue::DateTime(value),
					)]),
					Self::InVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"in".to_string(),
						::prisma_client_rust::PrismaValue::List(
							value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::DateTime(value)).collect(),
						),
					)]),
					Self::NotInVec(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"notIn".to_string(),
						::prisma_client_rust::PrismaValue::List(
							value.into_iter().map(|value| ::prisma_client_rust::PrismaValue::DateTime(value)).collect(),
						),
					)]),
					Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lt".to_string(),
						::prisma_client_rust::PrismaValue::DateTime(value),
					)]),
					Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"lte".to_string(),
						::prisma_client_rust::PrismaValue::DateTime(value),
					)]),
					Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gt".to_string(),
						::prisma_client_rust::PrismaValue::DateTime(value),
					)]),
					Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"gte".to_string(),
						::prisma_client_rust::PrismaValue::DateTime(value),
					)]),
					Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
						"not".to_string(),
						::prisma_client_rust::PrismaValue::DateTime(value),
					)]),
				}
			}
		}
	}
}
pub use _prisma::*;
